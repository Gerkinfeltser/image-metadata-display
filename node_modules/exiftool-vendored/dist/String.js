"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.splitLines = exports.stripSuffix = exports.stripPrefix = exports.pad3 = exports.pad2 = exports.leftPad = exports.toS = exports.compactBlanks = exports.notBlank = exports.blank = exports.isString = void 0;
const Number_1 = require("./Number");
const Times_1 = require("./Times");
function isString(o) {
    return typeof o === "string";
}
exports.isString = isString;
const spaces = (0, Times_1.times)(10, (i) => (0, Times_1.times)(i, () => " ").join(""));
const zeroes = (0, Times_1.times)(10, (i) => (0, Times_1.times)(i, () => "0").join(""));
function blank(s) {
    return s == null || String(s).trim().length === 0;
}
exports.blank = blank;
function notBlank(s) {
    return !blank(s);
}
exports.notBlank = notBlank;
function compactBlanks(arr) {
    return arr.filter(notBlank);
}
exports.compactBlanks = compactBlanks;
function padding(padChar, count) {
    if (count <= 0)
        return "";
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    return (padChar === "0" ? zeroes : spaces)[Math.floor(count)];
}
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function toS(s) {
    return s == null ? "" : String(s);
}
exports.toS = toS;
// eslint-disable-next-line @typescript-eslint/no-explicit-any
function leftPad(i, minLen, padChar) {
    if (i == null || ((0, Number_1.isNumber)(i) && isNaN(i)))
        i = 0;
    const s = String(i);
    if ((0, Number_1.isNumber)(i) && i < 0 && padChar === "0") {
        // avoid "000-1":
        return "-" + padding(padChar, minLen - s.length) + Math.abs(i);
    }
    else {
        return padding(padChar, minLen - s.length) + s;
    }
}
exports.leftPad = leftPad;
function pad2(...numbers) {
    return numbers.map((i) => leftPad(i, 2, "0"));
}
exports.pad2 = pad2;
function pad3(...numbers) {
    return numbers.map((i) => leftPad(i, 3, "0"));
}
exports.pad3 = pad3;
/**
 * NOT FOR GENERAL USE, as this is latin-case-insensitive
 */
function stripPrefix(s, prefix) {
    return toS(s).toLowerCase().startsWith(prefix.toLowerCase())
        ? s.slice(prefix.length)
        : s;
}
exports.stripPrefix = stripPrefix;
function stripSuffix(s, suffix) {
    const str = toS(s);
    return str.endsWith(suffix) ? str.slice(0, -suffix.length) : str;
}
exports.stripSuffix = stripSuffix;
/**
 * @return `arr` with all empty strings removed and all non-empty strings trimmed.
 */
function splitLines(...arr) {
    return arr
        .join("\n")
        .split(/\r?\n/)
        .map((ea) => ea.trim())
        .filter((ea) => ea.length > 0);
}
exports.splitLines = splitLines;
//# sourceMappingURL=String.js.map