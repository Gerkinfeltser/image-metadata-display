import { Maybe } from "./Maybe";
export declare function keys<T extends object, K extends string & keyof T>(o: T): K[];
export declare function isFunction(obj: any): obj is () => any;
export declare function fromEntries(arr: Maybe<[Maybe<string>, any]>[], obj?: any): any;
export type Unpick<T, U> = {
    [P in keyof T]: P extends U ? never : T[P];
};
export declare function omit<T extends Record<string, any>, S extends string>(t: T, ...keysToOmit: S[]): Unpick<T, S>;
