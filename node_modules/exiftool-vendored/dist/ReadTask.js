"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ReadTask_instances, _ReadTask_isVideo, _ReadTask_defaultToUTC, _ReadTask_tagName, _ReadTask_parseTags, _ReadTask_extractLatLon, _ReadTask_latlon, _ReadTask_geoTz, _ReadTask_extractTzOffset, _ReadTask_parseTag;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ReadTask = exports.DefaultReadTaskOptions = exports.nullish = exports.ReadTaskOptionFields = void 0;
const batch_cluster_1 = require("batch-cluster");
const _path = __importStar(require("node:path"));
const Array_1 = require("./Array");
const BinaryField_1 = require("./BinaryField");
const DefaultExifToolOptions_1 = require("./DefaultExifToolOptions");
const ErrorsAndWarnings_1 = require("./ErrorsAndWarnings");
const ExifDate_1 = require("./ExifDate");
const ExifDateTime_1 = require("./ExifDateTime");
const ExifTime_1 = require("./ExifTime");
const ExifToolOptions_1 = require("./ExifToolOptions");
const ExifToolTask_1 = require("./ExifToolTask");
const FilenameCharsetArgs_1 = require("./FilenameCharsetArgs");
const Lazy_1 = require("./Lazy");
const Maybe_1 = require("./Maybe");
const Number_1 = require("./Number");
const OnlyZerosRE_1 = require("./OnlyZerosRE");
const Pick_1 = require("./Pick");
const String_1 = require("./String");
const Timezones_1 = require("./Timezones");
/**
 * tag names we don't need to muck with:
 */
const PassthroughTags = [
    "ExifToolVersion",
    "DateStampMode",
    "Sharpness",
    "Firmware",
    "DateDisplayFormat",
];
exports.ReadTaskOptionFields = [
    "backfillTimezones",
    "defaultVideosToUTC",
    "geoTz",
    "ignoreZeroZeroLatLon",
    "imageHashType",
    "includeImageDataMD5",
    "inferTimezoneFromDatestamps",
    "inferTimezoneFromDatestampTags",
    "numericTags",
    "useMWG",
];
const NullIsh = ["undef", "null", "undefined"];
function nullish(s) {
    return s == null || ((0, String_1.isString)(s) && NullIsh.includes(s.trim()));
}
exports.nullish = nullish;
exports.DefaultReadTaskOptions = {
    optionalArgs: [],
    ...(0, Pick_1.pick)(DefaultExifToolOptions_1.DefaultExifToolOptions, ...exports.ReadTaskOptionFields),
};
const MaybeDateOrTimeRe = /when|date|time|subsec|creat|modif/i;
class ReadTask extends ExifToolTask_1.ExifToolTask {
    constructor(sourceFile, args, options) {
        super(args);
        _ReadTask_instances.add(this);
        this.sourceFile = sourceFile;
        this.args = args;
        this.options = options;
        this._raw = {};
        this._rawDegrouped = {};
        this.tags = {};
        this.invalidLatLon = false;
        _ReadTask_extractLatLon.set(this, (0, Lazy_1.lazy)(() => {
            var _a, _b;
            (_a = this.lat) !== null && _a !== void 0 ? _a : (this.lat = __classPrivateFieldGet(this, _ReadTask_instances, "m", _ReadTask_latlon).call(this, {
                tagName: "GPSLatitude",
                positiveRef: "N",
                negativeRef: "S",
                maxValid: 90,
            }));
            (_b = this.lon) !== null && _b !== void 0 ? _b : (this.lon = __classPrivateFieldGet(this, _ReadTask_instances, "m", _ReadTask_latlon).call(this, {
                tagName: "GPSLongitude",
                positiveRef: "E",
                negativeRef: "W",
                maxValid: 180,
            }));
            if (this.options.ignoreZeroZeroLatLon && this.lat === 0 && this.lon === 0) {
                this.invalidLatLon = true;
            }
            if (this.invalidLatLon) {
                this.lat = this.lon = undefined;
            }
        }));
        _ReadTask_geoTz.set(this, (0, Lazy_1.lazy)(() => {
            __classPrivateFieldGet(this, _ReadTask_extractLatLon, "f").call(this);
            if (this.invalidLatLon || this.lat == null || this.lon == null)
                return;
            try {
                const geoTz = this.options.geoTz(this.lat, this.lon);
                return (0, Timezones_1.normalizeZone)(geoTz);
            }
            catch {
                this.invalidLatLon = true;
                return;
            }
        }));
        // See https://github.com/photostructure/exiftool-vendored.js/issues/147#issuecomment-1642580118
        this.degroup = this.args.includes("-G");
        this.tags = { SourceFile: sourceFile };
        this.tags.errors = this.errors;
    }
    static for(filename, options) {
        const opts = (0, ExifToolOptions_1.handleDeprecatedOptions)({
            ...exports.DefaultReadTaskOptions,
            ...options,
        });
        const sourceFile = _path.resolve(filename);
        const args = [
            ...FilenameCharsetArgs_1.Utf8FilenameCharsetArgs,
            "-json",
            "-struct", // Return struct tags https://exiftool.org/struct.html
            ...(0, Array_1.toA)(opts.optionalArgs),
        ];
        if (opts.useMWG) {
            args.push("-use", "MWG");
        }
        if (opts.imageHashType != null && opts.imageHashType !== false) {
            // See https://exiftool.org/forum/index.php?topic=14706.msg79218#msg79218
            args.push("-api", "requesttags=imagedatahash");
            args.push("-api", "imagehashtype=" + opts.imageHashType);
        }
        // IMPORTANT: "-all" must be after numeric tag references, as the first
        // reference in wins
        args.push(...opts.numericTags.map((ea) => "-" + ea + "#"));
        // We have to add a -all or else we'll only get the numericTags. sad.
        // TODO: Do you need -xmp:all, -all, or -all:all? Is -* better?
        args.push("-all", sourceFile);
        return new ReadTask(sourceFile, args, opts);
    }
    toString() {
        return "ReadTask" + this.sourceFile + ")";
    }
    // only exposed for tests
    parse(data, err) {
        try {
            this._raw = JSON.parse(data)[0];
        }
        catch (jsonError) {
            // TODO: should restart exiftool?
            (0, batch_cluster_1.logger)().warn("ExifTool.ReadTask(): Invalid JSON", {
                data,
                err,
                jsonError,
            });
            throw err !== null && err !== void 0 ? err : jsonError;
        }
        // ExifTool does "humorous" things to paths, like flip path separators. resolve() undoes that.
        const SourceFile = _path.resolve(this._raw.SourceFile);
        // Sanity check that the result is for the file we want:
        if (SourceFile !== this.sourceFile) {
            // Throw an error rather than add an errors string because this is *really* bad:
            throw new Error(`Internal error: unexpected SourceFile of ${this._raw.SourceFile} for file ${this.sourceFile}`);
        }
        if (this.degroup) {
            this._rawDegrouped = {};
            for (const [key, value] of Object.entries(this._raw)) {
                const k = __classPrivateFieldGet(this, _ReadTask_instances, "m", _ReadTask_tagName).call(this, key);
                this._rawDegrouped[k] = value;
            }
        }
        else {
            this._rawDegrouped = this._raw;
        }
        return __classPrivateFieldGet(this, _ReadTask_instances, "m", _ReadTask_parseTags).call(this);
    }
}
exports.ReadTask = ReadTask;
_ReadTask_extractLatLon = new WeakMap(), _ReadTask_geoTz = new WeakMap(), _ReadTask_instances = new WeakSet(), _ReadTask_isVideo = function _ReadTask_isVideo() {
    var _a;
    return String((_a = this._rawDegrouped) === null || _a === void 0 ? void 0 : _a.MIMEType).startsWith("video/");
}, _ReadTask_defaultToUTC = function _ReadTask_defaultToUTC() {
    return __classPrivateFieldGet(this, _ReadTask_instances, "m", _ReadTask_isVideo).call(this) && this.options.defaultVideosToUTC;
}, _ReadTask_tagName = function _ReadTask_tagName(k) {
    var _a;
    return this.degroup ? (_a = k.split(":")[1]) !== null && _a !== void 0 ? _a : k : k;
}, _ReadTask_parseTags = function _ReadTask_parseTags() {
    __classPrivateFieldGet(this, _ReadTask_extractLatLon, "f").call(this);
    __classPrivateFieldGet(this, _ReadTask_instances, "m", _ReadTask_extractTzOffset).call(this);
    (0, Maybe_1.map)(this.tz, (ea) => (this.tags.tz = ea));
    (0, Maybe_1.map)(this.tzSource, (ea) => (this.tags.tzSource = ea));
    // avoid casting `this.tags as any` everywhere:
    const tags = this.tags;
    for (const [key, value] of Object.entries(this._raw)) {
        const k = __classPrivateFieldGet(this, _ReadTask_instances, "m", _ReadTask_tagName).call(this, key);
        const v = __classPrivateFieldGet(this, _ReadTask_instances, "m", _ReadTask_parseTag).call(this, k, value);
        // Note that we set `key` (which may include a group prefix):
        tags[key] = v;
    }
    // we could `return {...tags, ...errorsAndWarnings(this, tags)}` but tags
    // is a chonky monster, and we don't want to double work for the poor
    // garbage collector.
    const { errors, warnings } = (0, ErrorsAndWarnings_1.errorsAndWarnings)(this, tags);
    tags.errors = errors;
    tags.warnings = warnings;
    return tags;
}, _ReadTask_latlon = function _ReadTask_latlon({ tagName, positiveRef, negativeRef, maxValid, }) {
    const tagValue = this._rawDegrouped[tagName];
    const refKey = tagName + "Ref";
    const ref = this._rawDegrouped[refKey];
    const result = (0, Number_1.toFloat)(tagValue);
    if (result == null) {
        return;
    }
    else if (Math.abs(result) > maxValid) {
        this.warnings.push(`Invalid ${tagName}: ${JSON.stringify(tagValue)}`);
        this.invalidLatLon = true;
        return;
    }
    else if ((0, String_1.blank)(ref)) {
        // Videos may not have a GPSLatitudeRef or GPSLongitudeRef: if this is the case, assume the given sign is correct.
        return result;
    }
    else {
        // See https://github.com/photostructure/exiftool-vendored.js/issues/165
        // and https://www.exiftool.org/TagNames/GPS.html
        const expectedPositive = ref.toUpperCase().startsWith(positiveRef) || ((0, Number_1.isNumber)(ref) && ref >= 0);
        const expectedNegative = ref.toUpperCase().startsWith(negativeRef) || ((0, Number_1.isNumber)(ref) && ref < 0);
        if (expectedPositive && result < 0) {
            this.warnings.push(`Invalid ${tagName} or ${refKey}: expected ${ref} ${tagName} > 0 but got ${result}`);
        }
        else if (expectedNegative && result > 0) {
            this.warnings.push(`Invalid ${tagName} or ${refKey}: expected ${ref} ${tagName} < 0 but got ${result}`);
        }
        return result;
    }
}, _ReadTask_extractTzOffset = function _ReadTask_extractTzOffset() {
    (0, Maybe_1.map)((0, Maybe_1.firstDefinedThunk)([
        // If there is an explicit TimeZone tag (which is rare), defer to that
        // before defaulting to UTC for videos:
        () => (0, Timezones_1.extractTzOffsetFromTags)(this._rawDegrouped),
        () => (0, Maybe_1.map)(__classPrivateFieldGet(this, _ReadTask_geoTz, "f").call(this), (ea) => ({
            tz: ea.name,
            src: "GPSLatitude/GPSLongitude",
        })),
        () => (0, Timezones_1.extractTzOffsetFromDatestamps)(this._rawDegrouped, this.options),
        // See https://github.com/photostructure/exiftool-vendored.js/issues/113
        // and https://github.com/photostructure/exiftool-vendored.js/issues/156
        // Videos are frequently encoded in UTC, but don't include the
        // timezone offset in their datetime stamps.
        () => __classPrivateFieldGet(this, _ReadTask_instances, "m", _ReadTask_defaultToUTC).call(this)
            ? {
                tz: "UTC",
                src: "defaultVideosToUTC",
            }
            : // not applicable:
                undefined,
        // This is a last-ditch estimation heuristic:
        () => (0, Timezones_1.extractTzOffsetFromUTCOffset)(this._rawDegrouped),
    ]), (ea) => ({ tz: this.tz, src: this.tzSource } = ea));
}, _ReadTask_parseTag = function _ReadTask_parseTag(tagName, value) {
    var _a, _b, _c;
    if (nullish(value))
        return undefined;
    try {
        if (PassthroughTags.indexOf(tagName) >= 0) {
            return value;
        }
        if (tagName === "GPSLatitude") {
            return this.lat;
        }
        if (tagName === "GPSLongitude") {
            return this.lon;
        }
        if (Array.isArray(value)) {
            return value.map((ea) => __classPrivateFieldGet(this, _ReadTask_instances, "m", _ReadTask_parseTag).call(this, tagName, ea));
        }
        if (typeof value === "object") {
            const result = {};
            for (const [k, v] of Object.entries(value)) {
                result[k] = __classPrivateFieldGet(this, _ReadTask_instances, "m", _ReadTask_parseTag).call(this, tagName + "." + k, v);
            }
            return result;
        }
        if (typeof value === "string") {
            const b = BinaryField_1.BinaryField.fromRawValue(value);
            if (b != null)
                return b;
            if (MaybeDateOrTimeRe.test(tagName) &&
                // Reject date/time keys that are "0" or "00" (found in Canon
                // SubSecTime values)
                !OnlyZerosRE_1.OnlyZerosRE.test(value)) {
                // if #defaultToUTC() is true, _we actually think zoneless
                // datestamps are all in UTC_, rather than being in `this.tz` (which
                // may be from GPS or other heuristics). See issue #153.
                const tz = isUtcTagName(tagName) || __classPrivateFieldGet(this, _ReadTask_instances, "m", _ReadTask_defaultToUTC).call(this)
                    ? "UTC"
                    : this.options.backfillTimezones
                        ? this.tz
                        : undefined;
                // Time-only tags have "time" but not "date" in their name:
                const keyIncludesTime = /subsec|time/i.test(tagName);
                const keyIncludesDate = /date/i.test(tagName);
                const keyIncludesWhen = /when/i.test(tagName); // < ResourceEvent.When
                const result = (_c = (_b = (_a = (keyIncludesTime || keyIncludesDate || keyIncludesWhen
                    ? ExifDateTime_1.ExifDateTime.from(value, tz)
                    : undefined)) !== null && _a !== void 0 ? _a : (keyIncludesTime || keyIncludesWhen
                    ? ExifTime_1.ExifTime.fromEXIF(value, tz)
                    : undefined)) !== null && _b !== void 0 ? _b : (keyIncludesDate || keyIncludesWhen
                    ? ExifDate_1.ExifDate.from(value)
                    : undefined)) !== null && _c !== void 0 ? _c : value;
                if (this.options.backfillTimezones &&
                    result != null &&
                    this.tz != null &&
                    result instanceof ExifDateTime_1.ExifDateTime &&
                    __classPrivateFieldGet(this, _ReadTask_instances, "m", _ReadTask_defaultToUTC).call(this) &&
                    !isUtcTagName(tagName) &&
                    true === result.inferredZone) {
                    return result.setZone(this.tz);
                }
                return result;
            }
        }
        // Trust that ExifTool rendered the value with the correct type in JSON:
        return value;
    }
    catch (e) {
        this.warnings.push(`Failed to parse ${tagName} with value ${JSON.stringify(value)}: ${e}`);
        return value;
    }
};
function isUtcTagName(tagName) {
    return tagName.includes("UTC") || tagName.startsWith("GPS");
}
//# sourceMappingURL=ReadTask.js.map